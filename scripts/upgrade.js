const { ethers, upgrades } = require("hardhat");
const fs = require('fs');

async function main() {
  const [deployer] = await ethers.getSigners();
  
  console.log("üîÑ Upgrading LaserGun with account:", deployer.address);
  
  // ‚úÖ ETHERS V6 –°–ò–ù–¢–ê–ö–°–ò–°
  const balance = await ethers.provider.getBalance(deployer.address);
  console.log("üí∞ Account balance:", ethers.formatEther(balance));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
  const minBalance = ethers.parseEther("0.005"); // upgrade –¥–µ—à–µ–≤–ª–µ —á–µ–º deploy
  if (balance < minBalance) {
    throw new Error(`‚ùå Insufficient balance. Need at least 0.005 ETH, got ${ethers.formatEther(balance)} ETH`);
  }
  
  // –ß–∏—Ç–∞–µ–º –∞–¥—Ä–µ—Å proxy –∏–∑ deployment.json
  let proxyAddress, deploymentInfo;
  try {
    deploymentInfo = JSON.parse(fs.readFileSync('./deployment.json', 'utf8'));
    proxyAddress = deploymentInfo.proxy;
    console.log("üìã Found proxy address:", proxyAddress);
  } catch (error) {
    throw new Error("‚ùå Could not read deployment.json. Run deploy script first.");
  }
  
  if (!proxyAddress) {
    throw new Error("‚ùå No proxy address found in deployment.json");
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ proxy —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const code = await ethers.provider.getCode(proxyAddress);
  if (code === "0x") {
    throw new Error(`‚ùå No contract found at proxy address: ${proxyAddress}`);
  }
  
  console.log("üì¶ Getting LaserGun contract factory...");
  const LaserGunV2 = await ethers.getContractFactory("LaserGun");
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π implementation address
  const currentImpl = await upgrades.erc1967.getImplementationAddress(proxyAddress);
  console.log("üìÑ Current implementation:", currentImpl);
  
  console.log("üöÄ Upgrading contract...");
  
  // ‚úÖ ETHERS V6 + OpenZeppelin Upgrades
  const upgraded = await upgrades.upgradeProxy(proxyAddress, LaserGunV2
    /* , {
    unsafeAllow: [
        'storage-layout-error',
        'state-variable-reorder', 
        'state-variable-assignment',
        'constructor',
        'delegatecall',
        'selfdestruct',
        'missing-public-upgradeto',
        'external-library-linking'
    ],
    unsafeAllowCustomTypes: true,
    unsafeSkipStorageCheck: true,
    unsafeAllowLinkedLibraries: true
} */);
  
  // ‚úÖ ETHERS V6 - –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ upgrade
  await upgraded.waitForDeployment();
  
  // ‚úÖ ETHERS V6 - –ø–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ—Ç –∂–µ)
  const upgradedAddress = await upgraded.getAddress();
  
  if (upgradedAddress.toLowerCase() !== proxyAddress.toLowerCase()) {
    throw new Error(`‚ùå Proxy address changed! Expected: ${proxyAddress}, Got: ${upgradedAddress}`);
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π implementation address
  const newImpl = await upgrades.erc1967.getImplementationAddress(proxyAddress);
  
  console.log("‚úÖ LaserGun upgraded successfully!");
  console.log("üì¶ New implementation:", newImpl);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ implementation –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
  if (currentImpl.toLowerCase() === newImpl.toLowerCase()) {
    console.warn("‚ö†Ô∏è Warning: Implementation address didn't change. No upgrade needed?");
  } else {
    console.log("‚úÖ Implementation successfully updated");
  }
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º upgrade
  try {
    console.log("üîç Testing upgraded contract...");
    
    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º admin —Ä–æ–ª—å –≤–º–µ—Å—Ç–æ owner (LaserGun –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AccessControl, –Ω–µ Ownable)
    const ADMIN_ROLE = await upgraded.ADMIN_ROLE();
    const hasAdminRole = await upgraded.hasRole(ADMIN_ROLE, deployer.address);
    console.log("üëë Admin role assigned:", hasAdminRole);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞ –ø–∞—É–∑–µ
    const paused = await upgraded.paused();
    console.log("‚è∏Ô∏è Contract paused:", paused);
     
     
    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ V2, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∏—Ö
    try {
      // –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é version()
      const version = await upgraded.version();
      console.log("üìù Contract version:", version);
    } catch (error) {
      // –§—É–Ω–∫—Ü–∏—è version –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
      console.log("üìù No version function found (normal for V1)");
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ä–æ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    const DEFAULT_ADMIN_ROLE = await upgraded.DEFAULT_ADMIN_ROLE();
    const FEE_MANAGER_ROLE = await upgraded.FEE_MANAGER_ROLE();
    const PAUSER_ROLE = await upgraded.PAUSER_ROLE();
    const UPGRADER_ROLE = await upgraded.UPGRADER_ROLE();
    
    const hasDefaultAdmin = await upgraded.hasRole(DEFAULT_ADMIN_ROLE, deployer.address);
    const hasFeeManager = await upgraded.hasRole(FEE_MANAGER_ROLE, deployer.address);
    const hasPauser = await upgraded.hasRole(PAUSER_ROLE, deployer.address);
    const hasUpgrader = await upgraded.hasRole(UPGRADER_ROLE, deployer.address);
    
    console.log("üîê Role check:");
    console.log("  - DEFAULT_ADMIN_ROLE:", hasDefaultAdmin);
    console.log("  - ADMIN_ROLE:", hasAdminRole);
    console.log("  - FEE_MANAGER_ROLE:", hasFeeManager);
    console.log("  - PAUSER_ROLE:", hasPauser);
    console.log("  - UPGRADER_ROLE:", hasUpgrader);
    
    if (!hasAdminRole || !hasUpgrader) {
      throw new Error("‚ùå Critical roles not assigned to deployer");
    }
    
    console.log("‚úÖ Upgrade verification completed");
    
  } catch (error) {
    console.error("‚ùå Upgrade verification failed:", error.message);
    throw error;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º deployment info
  const network = await ethers.provider.getNetwork();
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± upgrade
  const upgradeInfo = {
    upgradedAt: new Date().toISOString(),
    upgrader: deployer.address,
    previousImplementation: currentImpl,
    newImplementation: newImpl,
    network: network.name,
    chainId: Number(network.chainId)
  };
  
  if (!deploymentInfo.upgrades) {
    deploymentInfo.upgrades = [];
  }
  deploymentInfo.upgrades.push(upgradeInfo);
  deploymentInfo.currentImplementation = newImpl;
  deploymentInfo.lastUpgraded = upgradeInfo.upgradedAt;
  deploymentInfo.implementation = newImpl; // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π implementation –∞–¥—Ä–µ—Å
  
  fs.writeFileSync(
    './deployment.json', 
    JSON.stringify(deploymentInfo, null, 2)
  );
  
  // –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  console.log("\nüìã Upgrade Summary:");
  console.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
  console.log("Proxy Address:        ", proxyAddress);
  console.log("Old Implementation:   ", currentImpl);
  console.log("New Implementation:   ", newImpl);
  console.log("Network:              ", network.name);
  console.log("Chain ID:             ", network.chainId);
  console.log("Upgrader:             ", deployer.address);
  console.log("Upgrade Status:       ", currentImpl === newImpl ? "No changes" : "Success");
  console.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
  
  console.log("üíæ Upgrade info saved to deployment.json");
  console.log("\nüéâ Upgrade completed successfully!");
  console.log("üîó Contract address remains:", proxyAddress);
}

main()
  .then(() => {
    console.log("‚úÖ Upgrade script completed successfully");
    process.exit(0);
  })
  .catch((error) => {
    console.error("‚ùå Upgrade failed:", error);
    process.exit(1);
  });